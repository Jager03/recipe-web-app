/* tslint:disable */
/* eslint-disable */
/**
 * open-api-recipe
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {string}
   * @memberof Category
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  name?: string;
}
/**
 *
 * @export
 * @interface GetRecipe200ResponseInner
 */
export interface GetRecipe200ResponseInner {
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInner
   */
  imageURL?: string;
  /**
   *
   * @type {Array<GetRecipe200ResponseInnerIngredientsInner>}
   * @memberof GetRecipe200ResponseInner
   */
  ingredients?: Array<GetRecipe200ResponseInnerIngredientsInner>;
  /**
   *
   * @type {Array<GetRecipe200ResponseInnerCategoriesInner>}
   * @memberof GetRecipe200ResponseInner
   */
  categories?: Array<GetRecipe200ResponseInnerCategoriesInner>;
}
/**
 *
 * @export
 * @interface GetRecipe200ResponseInnerCategoriesInner
 */
export interface GetRecipe200ResponseInnerCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerCategoriesInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerCategoriesInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerCategoriesInner
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerCategoriesInner
   */
  name?: string;
}
/**
 *
 * @export
 * @interface GetRecipe200ResponseInnerIngredientsInner
 */
export interface GetRecipe200ResponseInnerIngredientsInner {
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  unit?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipe200ResponseInnerIngredientsInner
   */
  imageURL?: string;
}
/**
 *
 * @export
 * @interface GetRecipeId200ResponseInner
 */
export interface GetRecipeId200ResponseInner {
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInner
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInner
   */
  description?: string;
  /**
   *
   * @type {Array<GetRecipeId200ResponseInnerIngredientsInner>}
   * @memberof GetRecipeId200ResponseInner
   */
  ingredients?: Array<GetRecipeId200ResponseInnerIngredientsInner>;
  /**
   *
   * @type {Array<GetRecipe200ResponseInnerCategoriesInner>}
   * @memberof GetRecipeId200ResponseInner
   */
  categories?: Array<GetRecipe200ResponseInnerCategoriesInner>;
}
/**
 *
 * @export
 * @interface GetRecipeId200ResponseInnerIngredientsInner
 */
export interface GetRecipeId200ResponseInnerIngredientsInner {
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof GetRecipeId200ResponseInnerIngredientsInner
   */
  unit?: string;
}
/**
 *
 * @export
 * @interface Ingredient
 */
export interface Ingredient {
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof Ingredient
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  unit?: string;
  /**
   *
   * @type {string}
   * @memberof Ingredient
   */
  imageURL?: string;
}
/**
 *
 * @export
 * @interface PostCategory200Response
 */
export interface PostCategory200Response {
  /**
   *
   * @type {string}
   * @memberof PostCategory200Response
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PostCategory200Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof PostCategory200Response
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof PostCategory200Response
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PostCategoryRequest
 */
export interface PostCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof PostCategoryRequest
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PostIngredientRequest
 */
export interface PostIngredientRequest {
  /**
   *
   * @type {string}
   * @memberof PostIngredientRequest
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof PostIngredientRequest
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof PostIngredientRequest
   */
  unit?: string;
  /**
   *
   * @type {string}
   * @memberof PostIngredientRequest
   */
  imageURL?: string;
  /**
   *
   * @type {string}
   * @memberof PostIngredientRequest
   */
  description?: string;
}
/**
 *
 * @export
 * @interface PostRecipe200Response
 */
export interface PostRecipe200Response {
  /**
   *
   * @type {string}
   * @memberof PostRecipe200Response
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PostRecipe200Response
   */
  imageURL?: string;
  /**
   *
   * @type {string}
   * @memberof PostRecipe200Response
   */
  description?: string;
  /**
   *
   * @type {Array<PostRecipeRequestIngredientsInner>}
   * @memberof PostRecipe200Response
   */
  ingredients?: Array<PostRecipeRequestIngredientsInner>;
  /**
   *
   * @type {Array<PostRecipe200ResponseCategoriesInner>}
   * @memberof PostRecipe200Response
   */
  categories?: Array<PostRecipe200ResponseCategoriesInner>;
}
/**
 *
 * @export
 * @interface PostRecipe200ResponseCategoriesInner
 */
export interface PostRecipe200ResponseCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof PostRecipe200ResponseCategoriesInner
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PostRecipeRequest
 */
export interface PostRecipeRequest {
  /**
   *
   * @type {string}
   * @memberof PostRecipeRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PostRecipeRequest
   */
  imageURL?: string;
  /**
   *
   * @type {string}
   * @memberof PostRecipeRequest
   */
  description?: string;
  /**
   *
   * @type {Array<PostRecipeRequestIngredientsInner>}
   * @memberof PostRecipeRequest
   */
  ingredients?: Array<PostRecipeRequestIngredientsInner>;
  /**
   *
   * @type {Array<PostRecipeRequestCategoriesInner>}
   * @memberof PostRecipeRequest
   */
  categories?: Array<PostRecipeRequestCategoriesInner>;
}
/**
 *
 * @export
 * @interface PostRecipeRequestCategoriesInner
 */
export interface PostRecipeRequestCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof PostRecipeRequestCategoriesInner
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PostRecipeRequestIngredientsInner
 */
export interface PostRecipeRequestIngredientsInner {
  /**
   *
   * @type {string}
   * @memberof PostRecipeRequestIngredientsInner
   */
  id?: string;
}
/**
 *
 * @export
 * @interface PutCategory200Response
 */
export interface PutCategory200Response {
  /**
   *
   * @type {string}
   * @memberof PutCategory200Response
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PutCategoryRequest
 */
export interface PutCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof PutCategoryRequest
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PutRecipe200Response
 */
export interface PutRecipe200Response {
  /**
   *
   * @type {string}
   * @memberof PutRecipe200Response
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PutRecipe200Response
   */
  imageURL?: string;
  /**
   *
   * @type {string}
   * @memberof PutRecipe200Response
   */
  description?: string;
  /**
   *
   * @type {Array<PostRecipeRequestIngredientsInner>}
   * @memberof PutRecipe200Response
   */
  ingredients?: Array<PostRecipeRequestIngredientsInner>;
  /**
   *
   * @type {Array<PutRecipe200ResponseCategoriesInner>}
   * @memberof PutRecipe200Response
   */
  categories?: Array<PutRecipe200ResponseCategoriesInner>;
}
/**
 *
 * @export
 * @interface PutRecipe200ResponseCategoriesInner
 */
export interface PutRecipe200ResponseCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof PutRecipe200ResponseCategoriesInner
   */
  name?: string;
}
/**
 *
 * @export
 * @interface PutRecipeRequest
 */
export interface PutRecipeRequest {
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequest
   */
  imageURL?: string;
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequest
   */
  description?: string;
  /**
   *
   * @type {Array<PostRecipeRequestIngredientsInner>}
   * @memberof PutRecipeRequest
   */
  ingredients?: Array<PostRecipeRequestIngredientsInner>;
  /**
   *
   * @type {Array<PutRecipeRequestCategoriesInner>}
   * @memberof PutRecipeRequest
   */
  categories?: Array<PutRecipeRequestCategoriesInner>;
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequest
   */
  ""?: string;
}
/**
 *
 * @export
 * @interface PutRecipeRequestCategoriesInner
 */
export interface PutRecipeRequestCategoriesInner {
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequestCategoriesInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PutRecipeRequestCategoriesInner
   */
  id?: string;
}
/**
 *
 * @export
 * @interface Recipe
 */
export interface Recipe {
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  imageURL?: string;
  /**
   *
   * @type {Array<GetRecipe200ResponseInnerIngredientsInner>}
   * @memberof Recipe
   */
  ingredients?: Array<Ingredient>;
  /**
   *
   * @type {Array<GetRecipe200ResponseInnerCategoriesInner>}
   * @memberof Recipe
   */
  categories?: Array<GetRecipe200ResponseInnerCategoriesInner>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory: async (
      id: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteCategory", "id", id);
      const localVarPath = `/category/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIngredient: async (
      id: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteIngredient", "id", id);
      const localVarPath = `/ingredient/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecipe: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteRecipe", "id", id);
      const localVarPath = `/recipe/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIngredient: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/ingredient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} [recipeName] query for name of recipe
     * @param {string} [categories] query for recipe in a set of categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipe: async (
      recipeName?: string,
      categories?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/recipe`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (recipeName !== undefined) {
        localVarQueryParameter["recipeName"] = recipeName;
      }

      if (categories !== undefined) {
        localVarQueryParameter["categories"] = categories;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipeId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRecipeId", "id", id);
      const localVarPath = `/recipe/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} ingredientName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipeIngredient: async (
      ingredientName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ingredientName' is not null or undefined
      assertParamExists(
        "getRecipeIngredient",
        "ingredientName",
        ingredientName
      );
      const localVarPath = `/recipe/ingredient/{ingredientName}`.replace(
        `{${"ingredientName"}}`,
        encodeURIComponent(String(ingredientName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {PostCategoryRequest} [postCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategory: async (
      postCategoryRequest?: PostCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIngredient: async (
      postIngredientRequest?: PostIngredientRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/ingredient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postIngredientRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {PostRecipeRequest} [postRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRecipe: async (
      postRecipeRequest?: PostRecipeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/recipe`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postRecipeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PutCategoryRequest} [putCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategory: async (
      id: any,
      putCategoryRequest?: PutCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putCategory", "id", id);
      const localVarPath = `/category/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putIngredient: async (
      id: any,
      postIngredientRequest?: PostIngredientRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putIngredient", "id", id);
      const localVarPath = `/ingredient/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postIngredientRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {PutRecipeRequest} [putRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRecipe: async (
      id: string,
      putRecipeRequest?: PutRecipeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putRecipe", "id", id);
      const localVarPath = `/recipe/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putRecipeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCategory(
      id: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.deleteCategory"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteIngredient(
      id: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteIngredient(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.deleteIngredient"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRecipe(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipe(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.deleteRecipe"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategory(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<GetRecipe200ResponseInnerCategoriesInner>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCategory(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.getCategory"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIngredient(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Ingredient>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getIngredient(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.getIngredient"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} [recipeName] query for name of recipe
     * @param {string} [categories] query for recipe in a set of categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecipe(
      recipeName?: string,
      categories?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipe(
        recipeName,
        categories,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.getRecipe"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecipeId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<GetRecipeId200ResponseInner>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeId(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.getRecipeId"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} ingredientName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecipeIngredient(
      ingredientName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecipeIngredient(
          ingredientName,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.getRecipeIngredient"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {PostCategoryRequest} [postCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCategory(
      postCategoryRequest?: PostCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostCategory200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCategory(
        postCategoryRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.postCategory"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postIngredient(
      postIngredientRequest?: PostIngredientRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostIngredientRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredient(
        postIngredientRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.postIngredient"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {PostRecipeRequest} [postRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postRecipe(
      postRecipeRequest?: PostRecipeRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostRecipe200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipe(
        postRecipeRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.postRecipe"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PutCategoryRequest} [putCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCategory(
      id: any,
      putCategoryRequest?: PutCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PutCategory200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCategory(
        id,
        putCategoryRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.putCategory"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putIngredient(
      id: any,
      postIngredientRequest?: PostIngredientRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostIngredientRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredient(
        id,
        postIngredientRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.putIngredient"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {PutRecipeRequest} [putRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putRecipe(
      id: string,
      putRecipeRequest?: PutRecipeRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PutRecipe200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipe(
        id,
        putRecipeRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DefaultApi.putRecipe"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteCategory(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIngredient(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteIngredient(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecipe(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteRecipe(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategory(
      options?: any
    ): AxiosPromise<Array<GetRecipe200ResponseInnerCategoriesInner>> {
      return localVarFp
        .getCategory(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIngredient(
      options?: any
    ): AxiosPromise<Array<GetRecipe200ResponseInnerIngredientsInner>> {
      return localVarFp
        .getIngredient(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} [recipeName] query for name of recipe
     * @param {string} [categories] query for recipe in a set of categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipe(
      recipeName?: string,
      categories?: string,
      options?: any
    ): AxiosPromise<Array<GetRecipe200ResponseInner>> {
      return localVarFp
        .getRecipe(recipeName, categories, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipeId(
      id: string,
      options?: any
    ): AxiosPromise<Array<GetRecipeId200ResponseInner>> {
      return localVarFp
        .getRecipeId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} ingredientName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecipeIngredient(
      ingredientName: string,
      options?: any
    ): AxiosPromise<Array<GetRecipe200ResponseInner>> {
      return localVarFp
        .getRecipeIngredient(ingredientName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {PostCategoryRequest} [postCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategory(
      postCategoryRequest?: PostCategoryRequest,
      options?: any
    ): AxiosPromise<PostCategory200Response> {
      return localVarFp
        .postCategory(postCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIngredient(
      postIngredientRequest?: PostIngredientRequest,
      options?: any
    ): AxiosPromise<PostIngredientRequest> {
      return localVarFp
        .postIngredient(postIngredientRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {PostRecipeRequest} [postRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRecipe(
      postRecipeRequest?: PostRecipeRequest,
      options?: any
    ): AxiosPromise<PostRecipe200Response> {
      return localVarFp
        .postRecipe(postRecipeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PutCategoryRequest} [putCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategory(
      id: any,
      putCategoryRequest?: PutCategoryRequest,
      options?: any
    ): AxiosPromise<PutCategory200Response> {
      return localVarFp
        .putCategory(id, putCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {any} id
     * @param {PostIngredientRequest} [postIngredientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putIngredient(
      id: any,
      postIngredientRequest?: PostIngredientRequest,
      options?: any
    ): AxiosPromise<PostIngredientRequest> {
      return localVarFp
        .putIngredient(id, postIngredientRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {PutRecipeRequest} [putRecipeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRecipe(
      id: string,
      putRecipeRequest?: PutRecipeRequest,
      options?: any
    ): AxiosPromise<PutRecipe200Response> {
      return localVarFp
        .putRecipe(id, putRecipeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {any} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteCategory(id: any, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteCategory(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {any} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteIngredient(id: any, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteIngredient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteRecipe(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteRecipe(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCategory(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getCategory(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getIngredient(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getIngredient(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} [recipeName] query for name of recipe
   * @param {string} [categories] query for recipe in a set of categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRecipe(
    recipeName?: string,
    categories?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRecipe(recipeName, categories, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRecipeId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getRecipeId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {string} ingredientName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRecipeIngredient(
    ingredientName: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRecipeIngredient(ingredientName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {PostCategoryRequest} [postCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postCategory(
    postCategoryRequest?: PostCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postCategory(postCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {PostIngredientRequest} [postIngredientRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postIngredient(
    postIngredientRequest?: PostIngredientRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postIngredient(postIngredientRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {PostRecipeRequest} [postRecipeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postRecipe(
    postRecipeRequest?: PostRecipeRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postRecipe(postRecipeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {any} id
   * @param {PutCategoryRequest} [putCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putCategory(
    id: any,
    putCategoryRequest?: PutCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putCategory(id, putCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {any} id
   * @param {PostIngredientRequest} [postIngredientRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putIngredient(
    id: any,
    postIngredientRequest?: PostIngredientRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putIngredient(id, postIngredientRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {PutRecipeRequest} [putRecipeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putRecipe(
    id: string,
    putRecipeRequest?: PutRecipeRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putRecipe(id, putRecipeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
